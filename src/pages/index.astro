---
import BaseLayout from "../layouts/BaseLayout.astro";
import { Image } from "astro:assets";
const pageTitle = "Mitch Pruitt | Designer & Developer";

import { getCollection } from "astro:content";
const allProjects = await getCollection("projects");
allProjects.sort((a, b) => b.data.year - a.data.year);
---

<BaseLayout pageTitle={pageTitle} headerColor={"light"} footer={true}>
	<div class="intro-container">
		<section class="panel one">
			<div class="panel-content">
				<h2 class="howdy">Howdy! I'm Mitch.</h2>
				<h1 class="graphic">Graphic Designer</h1>
				<h1 class="product">Product Designer</h1>
				<h1 class="dev">& Front-End Dev</h1>
			</div>
		</section>
		<section class="panel two">
			<div class="panel-content">
				<h2 class="take">I take concepts, products, <br />and brands from zero to one</h2>
				<h1 class="numerals">1.000</h1>
			</div>
			</section>
		<section class="panel three">
			<div class="panel-content">
				<div class="image-stack">
					{allProjects.map((project) => 
						<div class="stack-item">
							<Image src={project.data.cover} alt={project.data.coverAlt}/>
						</div>
					)}
				</div>
				<h1 class="see">See for yourself</h1>
				<h2 class="view"><a href="projects/">View Projects &#10132;</a></h2>
			</div>
		</section>
	</div>
</BaseLayout>

<style>
	.intro-container {
		/* Keeps offscreen elements from blowing out layout */
		overflow-x: hidden;

		.panel {
			min-height: 100vh;
			width: 100%;
			display: flex;
			justify-content: center;
			align-items: center;

			&.one {
				background-color: rgb(var(--darkest));

				.howdy {
					color: rgb(var(--lightest));
				}

				.graphic, .product, .dev {
					margin-top: 16px;
				}
			}

			&.two {
				background-color: rgb(var(--primary));

				.panel-content {
					width: 85%;
					text-align: center;
				}

				.take {
					color: rgb(var(--darkest));
				}

				.numerals {
					color: rgb(var(--lightest));
					font-variation-settings: var(--extracondensed-black);
					font-size: 26vw;
					font-variant-numeric: tabular-nums;
				}
			}

			&.three {
				background-color: rgb(var(--lightest));
				position: relative;

				.panel-content {
					text-align: center;
				}

				.image-stack {
					position: absolute;
					top: 0;
					left: 0;
					display: flex;
				}

				.stack-item {
					width: 100vw;
					height: 100vh;
					overflow: hidden;

					img {
						width: 100%;
						height: 100%;
						object-fit: cover;
					}
				}

				.see {
					color: rgb(var(--lightest));
					margin-bottom: 64px;
					mix-blend-mode: difference;
				}

				.view {
					text-align: center;
					padding: 8px 16px;
					margin: auto;
					width: fit-content;
					color: rgb(var(--lightest));
					mix-blend-mode: difference;
					border-radius: 16px;
					background-color: rgb(var(--darkest));
					
					a {
						color: unset;
						transition: var(--transition-regular);
						&:hover {
							font-variation-settings: var(--wide-semibold-italic);
						}
					}
				}
			}
		}

		h2 {
			font-size: 4vw;
			clip-path: var(--full-clip);
		}

		h1 {
			color: rgb(var(--primary));
			font-variation-settings: var(--condensed-black);
			text-transform: uppercase;
			font-size: 10vw;
			line-height: .85;
			clip-path: var(--full-clip);
		}
	}
</style>

<script>
import {gsap, splitType, cleanText} from "../scripts/animation";

	gsap.set('main', {visibility: "visible"})

	// Panel One
	const graphicText = new splitType(".graphic", {types: 'words'})
	const graphic = graphicText.words

	const productText = new splitType(".product", {types: 'words'})
	const product = productText.words

	const devText = new splitType(".dev", {types: 'words'})
	const dev = devText.words

	// Panel Two
	const counter = document.querySelector(".numerals")

	// Panel Three
	const imageStack = document.querySelector(".image-stack");

	//@ts-ignore
	const finalImagePercent = -100 + (100/imageStack?.childElementCount)

	const seeText = new splitType(".see", {types: 'words'})
	const see = seeText.words


	gsap.timeline({
		scrollTrigger: {
			trigger: ".one",
			// markers: true,
			pin: true,
			// scrub: 1,
			start: "top top",
			end: "+=2000",
			toggleActions: "play none none reverse"
		}
	},)
	.from(".howdy", {
		opacity: 1,
		xPercent: 6,
		yPercent: 50,
		fontSize: "8vw",
		duration: 1,
		ease: "power4.out"
	})
	.from(graphic, {
		opacity: 0,
		y: -200,
		stagger: 0.25,
		duration: 1,
		ease: "power4.out",
	})
	.from(product, {
		opacity: 0,
		y: -200,
		stagger: 0.25,
		duration: 1,
		ease: "power4.out",
	}, ">-1")
	.from(dev, {
		opacity: 0,
		y: -200,
		stagger: 0.25,
		duration: 1,
		ease: "power4.out",
	}, ">-1")
	
	gsap.timeline({
		scrollTrigger: {
			trigger: ".two",
			// markers: true,
			pin: true,
			scrub: 1,
			start: "top top",
			end: "+=2000",
			toggleActions: "play none none reverse",
		}
	})
	.to(".name .active", {
		color: "rgb(var(--lightest))",
		borderColor: "rgb(var(--lightest))",
		duration: .25,
	})
	.from(counter, {
	textContent: 0.000000,
		duration: 5,
		ease: "expo.out",
		snap: {
			textContent: 0.000001
		},
		onUpdate: function () {
			// @ts-ignore 
			counter.textContent = parseFloat(counter.textContent).toFixed(6)
		}
	})
	.to(counter, {
		text: "& Beyond",
		ease: "power4.out",
		duration: 2
	}, ">+1")

	gsap.timeline({
		scrollTrigger: {
			trigger: ".three",
			// markers: true,
			pin: true,
			scrub: 1,
			start: "top top",
			end: "+=6000",
			toggleActions: "play none none reverse"
		}
	})
	.to(".name .active", {
		color: "rgb(var(--primary))",
		borderColor: "rgb(var(--primary))",
		duration: .25,
	})
	.to(".site-nav", {
		color:"rgb(var(--darkest))",
		duration: .25,
	}, "<")
	.from(see, {
		opacity: 0,
		y: -100,
		stagger: .25,
		duration: .5,
		ease: "power4.out",
	}, "<")
	.from(".view", {
		opacity: 0,
		x: -100,
		duration: .5,
		ease: "power4.out",
	}, ">-.25")
	.from(imageStack, {
		opacity: 0,
		duration: .5
	}, "<")
	.to(imageStack, {
		xPercent: finalImagePercent,
		duration: 6,
		ease: "power4.out"
	}, ">-.25")

</script>