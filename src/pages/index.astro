---
import BaseLayout from "@layouts/BaseLayout.astro";
import { Image } from "astro:assets";
import "@styles/index.css";
const pageTitle = "Designer & Developer";

import { getCollection } from "astro:content";
const allProjects = await getCollection("projects");
allProjects.sort((a, b) => b.data.year - a.data.year);
---
<BaseLayout pageTitle={pageTitle} headerColor={"light"} footer={true} pageURL={Astro.url.pathname}>
	<div class="intro-container">
		<section class="panel one">
			<div class="panel-content">
				<h2 class="howdy">Howdy! I'm Mitch.</h2>
				<h1 class="graphic">Graphic Designer</h1>
				<h1 class="product">Product Designer</h1>
				<h1 class="dev">& Front-End Dev</h1>
			</div>
			<div class="scroll-indicator">
				<span class="icon">&darr; &darr; &darr;</span>
			</div>
		</section>
		<section class="panel two">
			<div class="panel-content">
				<h2 class="take">I take concepts, products, <br />and brands from zero to one</h2>
				<h1 class="numerals">1.000</h1>
			</div>
			</section>
		<section class="panel three">
			<div class="panel-content">
				<div class="image-stack">
					{allProjects.map((project) => 
						<div class="stack-item">
							<Image src={project.data.cover} alt={project.data.coverAlt}/>
						</div>
					)}
				</div>
				<h1 class="see">See for yourself</h1>
				<h2 class="view"><a href="projects/">View Projects</a></h2>
			</div>
		</section>
	</div>
</BaseLayout>

<script>
import {gsap, splitType, cleanText} from "../scripts/animation";

	gsap.set('main', {visibility: "visible"})

	const iconText = new splitType(".icon", {types: 'chars'})
	const icon = iconText.chars

	// Panel One
	const graphicText = new splitType(".graphic", {types: 'words'})
	const graphic = graphicText.words

	const productText = new splitType(".product", {types: 'words'})
	const product = productText.words

	const devText = new splitType(".dev", {types: 'words'})
	const dev = devText.words

	// Panel Two
	const counter = document.querySelector(".numerals")

	// Panel Three
	const imageStack = document.querySelector(".image-stack");

	//@ts-ignore
	const finalImagePercent = -100 + (100/imageStack?.childElementCount)

	const seeText = new splitType(".see", {types: 'words'})
	const see = seeText.words

	// Scroll indicator animation
	const scrollMarks = gsap.timeline({
		repeat: -1,
	})
	.from(icon, {
		y: -10,
		opacity: 0,
		duration: .5,
		stagger: .5,
		ease: "power4.out",
	})
	.to(icon, {
		y: 10,
		opacity: 0,
		duration: .5,
		stagger:.5,
		ease: "power4.out",
	})

	// Panel one
	gsap.timeline({
		scrollTrigger: {
			trigger: ".one",
			pin: true,
			start: "top top",
			toggleActions: "play reverse restart none"
		}
	},)
	.to(".name .active", {
		color: "rgb(var(--primary))",
		borderColor: "rgb(var(--primary))",
		duration: 0,
	})
	.from(".howdy", {
		opacity: 0,
		x: 200,
		duration: 1,
		ease: "power4.out"
	},"<")
	.from(graphic, {
		opacity: 0,
		y: -200,
		stagger: 0.25,
		duration: 1,
		ease: "power4.out",
	}, "<+.5")
	.from(product, {
		opacity: 0,
		y: -200,
		stagger: 0.25,
		duration: 1,
		ease: "power4.out",
	}, ">-1")
	.from(dev, {
		opacity: 0,
		y: -200,
		stagger: 0.25,
		duration: 1,
		ease: "power4.out",
	}, ">-1")
	.add(scrollMarks, 1)
	
	// Panel two
	gsap.timeline({
		scrollTrigger: {
			trigger: ".two",
			// markers: true,
			pin: true,
			scrub: 1,
			start: "top top",
			end: "+=2000",
			toggleActions: "play none none reverse",
		}
	})
	.to(".name .active", {
		color: "rgb(var(--lightest))",
		borderColor: "rgb(var(--lightest))"
	})
	.from(counter, {
	textContent: 0.000000,
		duration: 5,
		ease: "expo.out",
		snap: {
			textContent: 0.000001
		},
		onUpdate: function () {
			// @ts-ignore 
			counter.textContent = parseFloat(counter.textContent).toFixed(6)
		}
	})
	.to(counter, {
		text: "& Beyond",
		ease: "power4.out",
		duration: 2
	}, ">+1")

	//  Panel three
	gsap.timeline({
		scrollTrigger: {
			trigger: ".three",
			// markers: true,
			pin: true,
			scrub: 1,
			start: "top top",
			end: "+=6000",
			toggleActions: "play none none reverse"
		}
	})
	.to(".name .active", {
		color: "rgb(var(--primary))",
		borderColor: "rgb(var(--primary))",
	}, "<")
	.from(see, {
		opacity: 0,
		y: -100,
		stagger: .25,
		duration: .5,
		ease: "power4.out",
	}, "<")
	.from(".view", {
		opacity: 0,
		x: -100,
		duration: .5,
		ease: "power4.out",
	}, ">-.25")
	.from(imageStack, {
		opacity: 0,
		duration: .5
	}, "<-1")
	.to(imageStack, {
		xPercent: finalImagePercent,
		duration: 6,
		ease: "power4.out"
	}, ">-.25")

</script>